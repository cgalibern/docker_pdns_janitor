#!/usr/bin/python3

from __future__ import print_function

import os
import sys
import json
import socket
import tempfile
import contextlib
import select
import time
import traceback

class LsnrReset(Exception):
    pass

def bdecode(buff):
    """
    On python, convert bytes to string using utf-8 and ascii as a fallback
    """
    if buff is None:
        return buff
    if sys.version_info[0] < 3:
        return buff
    if type(buff) == str:
        return buff
    else:
        return buff.decode("utf-8", errors="ignore")
    return buff

def msg_encode(data):
    return (json.dumps(data)+'\0').encode()

def msg_decode(message):
    message = bdecode(message).rstrip("\0\x00")
    if len(message) == 0:
        return
    return json.loads(message)


class PdnsJanitor(object):
    @contextlib.contextmanager
    def lsnr_socket(self):
        if "OPENSVC_LSNR_SOCK" in os.environ:
            lsnr_path = os.environ["OPENSVC_LSNR_SOCK"]
        else:
            lsnr_path = "/var/run/lsnr/lsnr.sock"

        print("init listener socket")
        try:
            lsnr = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
            lsnr.settimeout(1)
            lsnr.connect(lsnr_path)
            yield lsnr
        finally:
            lsnr.close()

    @contextlib.contextmanager
    def recursor_socket(self):
        if "OPENSVC_RECURSOR_SOCK" in os.environ:
            recursor_path = os.environ["OPENSVC_RECURSOR_SOCK"]
        else:
            recursor_path = "/var/run/pdns_recursor.controlsocket"
        recursor_dir = os.path.dirname(recursor_path)
        tmpf = tempfile.NamedTemporaryFile(dir=recursor_dir)
        fname = tmpf.name
        tmpf.close()

        try:
             recursor = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
             recursor.bind(fname)
             recursor.connect(recursor_path)
             yield recursor
        finally:
             os.unlink(fname)

    def wipe(self, domain):
        with self.recursor_socket() as recursor:
            msg = "wipe-cache %s" % domain
            print(msg)
            msg = (msg+"\n").encode()
            recursor.sendall(msg)
            recursor.settimeout(0.2)
            try:
                data = recursor.recv(512)
                print(data.decode())
            except socket.timeout:
                print("no response from recursor")

    def event_router(self, data):
        if data is None:
            return
        changes = data.get("data", {})
        wipe = False
        for change in changes:
            try:
                key = change[0]
            except IndexError:
                continue
            if not key:
                continue
            change_len = len(change)
            if change_len == 2:
                # change
                # ex: [['monitor', 'nodes', 'n1', 'services', 'status', '3.svcdevops-front', 'resources', 'ip#0', 'status'], 'down']
                # ex: [['monitor', 'nodes', 'n1', 'services', 'status', '2.svcdevops-front', 'resources', 'ip#0', 'info', 'ipaddr'], '10.38.0.5']
                val = change[1]
                if len(key) == 9 and \
                   key[0] == "monitor" and \
                   key[1] == "nodes" and \
                   key[3] == "services" and \
                   key[4] == "status" and \
                   key[6] == "resources" and \
                   key[7].startswith("ip#") and \
                   key[8] == "status":
                    svcname = key[5]
                    print("change", key[2], "instance ip status", svcname, key[-1])
                    wipe = True
                if len(key) == 10 and \
                   key[0] == "monitor" and \
                   key[1] == "nodes" and \
                   key[3] == "services" and \
                   key[4] == "status" and \
                   key[6] == "resources" and \
                   key[7].startswith("ip#") and \
                   key[8] == "info" and \
                   key[9] == "ipaddr":
                    svcname = key[5]
                    print("change", key[2], "instance ip addr", svcname, key[-1])
                    wipe = True
            elif change_len == 1:
                # delete
                # ex: [['monitor', 'nodes', 'n1', 'services', 'status', '3.svcdevops-front']]
                if len(key) == 6 and \
                   key[0] == "monitor" and \
                   key[1] == "nodes" and \
                   key[3] == "services" and \
                   key[4] == "status":
                    svcname = key[5]
                    print("delete", key[2], "instance", svcname)
                    wipe = True
        if wipe:
            self.wipe(self.clustername+"$")

    def mainloop(self, lsnr):
        messages = self.recv_messages(lsnr, stream=True)
        for message in messages:
            self.event_router(message)

    def recv_messages(self, sock, stream=False):
        messages = []
        chunks = []
        sep = b"\x00"
        while True:
            try:
                chunk = sock.recv(4096)
            except socket.timeout:
                break
            if stream and chunk == b'':
                # disconnect
                raise LsnrReset
            if not chunk or chunk == sep:
                break
            chunks.append(chunk)

        if sys.version_info[0] >= 3:
            data = b"".join(chunks)
        else:
            data = "".join(chunks)
        if len(data) == 0:
            return []
        for message in data.split(sep):
            message = msg_decode(message)
            messages.append(message)
        return messages

    def init_cluster_data(self):
        with self.lsnr_socket() as lsnr:
            if lsnr is None:
                print("lsnr socket not ready")
                time.sleep(1)
                return
            lsnr.sendall(msg_encode({"action": "daemon_status"}))
            data = self.recv_messages(lsnr)[0]
            if data is None:
                print("unable to get initial cluster data")
                return
            self.clustername = data["cluster"]["name"]
            print("clustername: %s" % self.clustername)

    def main(self):
        while True:
            try:
                self.init_cluster_data()
                with self.lsnr_socket() as lsnr:
                    lsnr.sendall(msg_encode({"action": "events"}))
                    if lsnr is None:
                        raise Exception("lsnr socket not ready")
                    while True:
                        self.mainloop(lsnr)
            except LsnrReset:
                time.sleep(1)
            except Exception:
                traceback.print_exc()
                time.sleep(1)

if __name__ == "__main__":
    try:
        o = PdnsJanitor()
        o.main()
    except KeyboardInterrupt:
        pass

